class Solution {
public:
    int mergeStones(vector<int>& stones, int K) {
        /// dp[i][j][x] = min cost to merge stones to x pile.
        /// dp[i][i][1] = 0
        /// dp[i][j][x] = dp[i][t][x-1] + dp[t+1][j][1] + sum[i][j]
        int n = stones.size() ; 
        if((n-1) % (K-1)) return -1; 
        int dp[n+1][n+1][K+1]; 
        int pref[n] ; 
        memset(pref, 0 , sizeof pref) ; 
        pref[0] = stones[0] ; 
        for(int i = 1 ; i < n ; ++i){
            pref[i]=pref[i-1] + stones[i] ;
        }
        for(int i = 0 ; i < n ; ++i){
            for(int j = i ; j < n ; ++j){
                for(int k = 1 ; k <= K ;++k) {
                    dp[i][j][k] = 1e9; 
                }
            }
        }
        for(int i = 0 ; i < n ; ++i){
            dp[i][i][1] = 0; 
        }
        for(int len = 2 ; len <= n ; ++len){
            for(int i = 0 ; i <= n - len ; ++i){
                int j = i + len - 1 ; 
                int sum = 0 ; 
                if(i == 0) sum = pref[j] ; 
                else sum = pref[j] - pref[i-1] ;
                for(int k = 2 ; k <= K ; ++k){ 
                    for(int t = i ; t < j ; ++t){
                        dp[i][j][k] = min({dp[i][j][k] , dp[i][t][k-1] + dp[t+1][j][1]}); 
                    }
                }
                dp[i][j][1] = dp[i][j][K] +   sum ; 
            }
        }
        int ans = dp[0][n-1][1] ; 
        return ans ; 
    }
};
