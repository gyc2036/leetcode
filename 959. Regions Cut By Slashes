class dsu{
	public:
	vector<int> arr;
	dsu(int n):arr(n){
		for(int i=0;i<n;i++){
			arr[i]=i;
		}
	}

	int find(int x){
		if(arr[x]!=x){
			arr[x]=find(arr[x]);
		}
		return arr[x];
	}

	void merge(int a, int b){
		arr[find(a)]=arr[find(b)];
	}
};

class Solution {
public:
	int regionsBySlashes(vector<string>& grid) {
		int n=grid.size();
		dsu DP(4*n*n);
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(grid[i][j]=='/'){
					DP.merge((i*4*n+4*j)+0,(i*4*n+4*j)+3);
					DP.merge((i*4*n+4*j)+1,(i*4*n+4*j)+2);
				}
				if(grid[i][j]=='\\'){
					DP.merge((i*4*n+4*j)+0,(i*4*n+4*j)+1);
					 DP.merge((i*4*n+4*j)+2,(i*4*n+4*j)+3);
				}
				if(grid[i][j]==' '){
					DP.merge((i*4*n+4*j)+1,(i*4*n+4*j)+0);
					DP.merge((i*4*n+4*j)+3,(i*4*n+4*j)+2);
					DP.merge((i*4*n+4*j)+1,(i*4*n+4*j)+3);
				}
				if(i<n-1){
					DP.merge((i*4*n+4*j)+2,(i+1)*4*n+4*j);
				}
				if(j<n-1){
					DP.merge((i*4*n+4*j)+1,(i*4*n+4*(j+1))+3);
				}
			}
		}

		int res=0;
		for(int i=0;i<DP.arr.size();i++){
			if(DP.arr[i]==i){
				res++;
			}
		}
		return res;
	}
};
