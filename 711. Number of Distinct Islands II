class Solution {
public:
    int numDistinctIslands2(vector<vector<int>>& grid) {
        if (grid.empty()) {
            return 0;
        }
        int m = grid.size(), n = grid[0].size();
        set<vector<pair<int, int>>> shapes;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j]) {
                    grid[i][j] = 0;
                    vector<pair<int, int>> shape = {{i, j}};
                    int i = 0;
                    while (i < shape.size()) {
                        pair<int, int> t = shape[i++];
                        int r = t.first, c = t.second;
                        if (r && grid[r - 1][c]) {
                            grid[r - 1][c] = 0;
                            shape.push_back({r - 1, c});
                        }
                        if (r + 1 < m && grid[r + 1][c]) {
                            grid[r + 1][c] = 0;
                            shape.push_back({r + 1, c});
                        }
                        if (c && grid[r][c - 1]) {
                            grid[r][c - 1] = 0;
                            shape.push_back({r, c - 1});
                        }
                        if (c + 1 < n && grid[r][c + 1]) {
                            grid[r][c + 1] = 0;
                            shape.push_back({r, c + 1});
                        }
                    }
                    shapes.insert(normalize(shape));
                }
            }
        }
        return shapes.size();
    }
private:
    vector<pair<int, int>> normalize(vector<pair<int, int>>& shape) {
        int n = shape.size();
        vector<vector<pair<int, int>>> shapes(8);
        for (auto point : shape) {
            int x = point.first, y = point.second;
            shapes[0].push_back({x, y});
            shapes[1].push_back({x, -y});
            shapes[2].push_back({-x, y});
            shapes[3].push_back({-x, -y});
            shapes[4].push_back({y, x});
            shapes[5].push_back({y, -x});
            shapes[6].push_back({-y, x});
            shapes[7].push_back({-y, -x});
        }
        for (auto& shape_ : shapes) {
            sort(shape_.begin(), shape_.end());
            for (int i = n - 1; i >= 0; i--) {
                shape_[i].first -= shape_[0].first;
                shape_[i].second -= shape_[0].second;
            }
        }
        sort(shapes.begin(), shapes.end());
        return shapes[0];
    }
};
