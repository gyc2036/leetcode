   /// @return the tail of the flattened list. If you want the head, it's the node you passed in.
    constexpr Node* tail(Node* const head)
    {
        Node* node = head;
        Node* list_tail = nullptr;
        do{
            if(node->child)
            {
                // Recurse into sub-list, and assume it is flat on return: 
                Node* splice_tail = tail(node->child);
                
                // fixup the pointers to splice the new flat array into us:
                Node* after_splice = node->next;
                node->next = node->child;
                node->child->prev = node;
                splice_tail->next = after_splice;
                // Check that node wasn't the end of a list before splicing the next,
                // nonexistant node in:
                if(after_splice){
                    after_splice->prev = splice_tail;
                }
                
                // Enforce the flatness:
                node->child = nullptr;
                
                // Hop over the spliced-in sub-list to avoid redundant work traversing through it:
                node = splice_tail;
            }
            list_tail = node; // We assign this n times in the loop so we have the last value of it ready on return. Hmmm ...
            node = node->next;
        } while(node != nullptr);
        return list_tail;
    }

    class Solution {
    public:
        constexpr static
        Node* flatten(Node* head) {
            if(head){
                tail(head);
            }
            return head;
        }
    };
