Node* construct(vector<vector<int>>& grid) {
	return construct(grid, 0, 0, grid.size());
}

Node* construct(vector<vector<int>>& grid, int x, int y, int d) {
	if (d == 1) 
		return new Node(grid[x][y] == 1, true, nullptr, nullptr, nullptr, nullptr);
	if (d == 0)
		return nullptr;

	bool hasOne = false, hasZero = false;
	for (int i = x; i < x + d; i++) {
		for (int j = y; j < y + d; j++) {
			if (grid[i][j] == 1) hasOne = true;
			else hasZero = true;
		}
	}
	if (hasOne && !hasZero) 
		return new Node(true, true, nullptr, nullptr, nullptr, nullptr);
	if (!hasOne && hasZero) 
		return new Node(false, true, nullptr, nullptr, nullptr, nullptr);

	auto topLeft = construct(grid, x, y, d/2);
	auto topRight = construct(grid, x, y+d/2, d/2);
	auto bottomLeft = construct(grid, x+d/2, y, d/2);
	auto bottomRight = construct(grid, x+d/2, y+d/2, d/2);

	return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);
}
