string encode(string s) {
    const int n = s.length();
    const char* p = s.c_str();
    enum ARGMIN { ORIG, RPT, CONCAT };
    struct MemoItem { // computed for each range [i,j)
        int patLen; // length of the pattern that [i,j) is a repetision of
        int strLen; // minimum length of encoded string representing [i,j)
        ARGMIN argmin; // the way min encoded length was achieved
        const MemoItem* m1; // this and two below accompany argmin
        const MemoItem* m2;
        int k;
        string render(const string& s, int i, int j) const {
            if (argmin == ORIG) {
                return s.substr(i, j - i);
            } else if (argmin == RPT) {
                return to_string((j - i) / patLen) + "[" + m1->render(s, i, i + patLen) + "]";
            } else {
                return m1->render(s, i, k) + m2->render(s, k, j);
            }
        }
        void tryUpdate(int str, ARGMIN argmin, const MemoItem* m1, const MemoItem* m2, int k) {
            if (str < this->strLen) {
                this->strLen = str;
                this->argmin = argmin;
                this->m1 = m1;
                this->m2 = m2;
                this->k = k;
            }
        }
    };
    const auto numLen = [](int num) {
        return num < 10 ? 1 : (num < 100 ? 2 : 3);
    };
    vector<vector<MemoItem>> memo(n + 1, vector<MemoItem>(n + 1));
    for (int j = 0; j <= n; ++j) {
        for (int i = j - 1; i >= 0; --i) {
            auto& m = memo[i][j];
            const int len = j - i;
            m = { len, len, ORIG };
            for (int k = i + 1; k < j; ++k) {
                const auto& t1 = memo[i][k];
                const auto& t2 = memo[k][j];
                m.tryUpdate(t1.strLen + t2.strLen, CONCAT, &t1, &t2, k);
                if (t1.patLen == t2.patLen && strncmp(p + k, p + i, t1.patLen) == 0) {
                    m.patLen = min(m.patLen, t1.patLen);
                    m.tryUpdate(numLen(len / m.patLen) + 2 + memo[i][i + m.patLen].strLen,
                        RPT, &memo[i][i + m.patLen], 0, 0);
                }
            }
        }
    }

    return memo[0][n].render(s, 0, n);
}
