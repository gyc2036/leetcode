class Solution {
public:
	vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {
		vector<vector<int>> ans;
		for(int i=0;i<R;i++)
			for(int j=0;j<C;j++){
				ans.push_back({i,j});
			}
		auto comp=[r0,c0](vector<int>& a,vector<int>& b){
			return abs(a[0]-r0)+abs(a[1]-c0)<abs(b[0]-r0)+abs(b[1]-c0);
		};
		sort(ans.begin(),ans.end(),comp);
		return ans;

	}
};

//C++ without lambda function
	class Solution {
public:
	vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {
		unordered_map<int,vector<vector<int>>> m;
		vector<vector<int>> ans;
		vector<int> cnt;
		for(int i=0;i<R;i++)
			for(int j=0;j<C;j++){
				int cur=abs(i-r0)+abs(j-c0);
				m[cur].push_back({i,j});
				if(find(cnt.begin(),cnt.end(),cur)==cnt.end()){
					cnt.push_back(cur);
				}
			}
		sort(cnt.begin(),cnt.end());
		for(auto x:cnt){
			while(!m[x].empty()){
				ans.push_back(m[x].back());
				m[x].pop_back();
			}
		}
		return ans;




	}
};
