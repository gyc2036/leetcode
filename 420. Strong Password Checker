class Solution {
public:
    int strongPasswordChecker(string s) {
        int add=0, del=0, replace=0;
        int size = s.size();
        if(size<6)
            add=6-size;
        else if (size>20)
            del = size-20;
        int ans = add+del;
        bool small=false;
        bool caps=false;
        bool digit=false;
        int i;
        int sadd=add;
        int optimize = 1;
        while(optimize<4){
        for( i=0; i<size-2;i++)
        {
            if(s[i]==s[i+1] && s[i]==s[i+2])
            {
                int k=i;
                while(s[k]==s[k+1])
                    k++;
                int dup = k-i+1;
                i=k-(optimize-1);
                if(del>=optimize && dup%3==(optimize-1))
                {
                    int j=i;
                    while(j<size-optimize)
                    {
                        s[j]=s[j+optimize];
                        j++;
                    }
                    del=del-optimize;
                    size=size-optimize;
                    i--;
                }
                
            }
        }
            optimize++;
        }
        for( i=0; i<size-2;i++)
        {
            if(small==false && s[i]>='a' &&s[i]<='z')
                small=true;
            else if(caps==false && s[i]>='A' && s[i]<='Z')
                caps=true;
            else if(digit==false && s[i]>='0' && s[i]<='9')
                digit=true;
            if(s[i]==s[i+1] && s[i]==s[i+2])
            {
                if(add > 0)
                {
                    add--;
                    i++;
                }
                else 
                {
                    replace++;
                    i=i+2;
                }
            }
        }
        while(i<size){
        if(small==false && s[i]>='a' &&s[i]<='z')
            small=true;
        else if(caps==false && s[i]>='A' && s[i]<='Z')
            caps=true;
        else if(digit==false && s[i]>='0' && s[i]<='9')
            digit=true;
        i++;
        }
        ans=ans+replace;
        int need = -sadd-replace;
        if(!small) need++;
        if(!digit) need++;
        if(!caps) need++;
        if(need>0) ans=ans+need;
        return ans;
    }
};
