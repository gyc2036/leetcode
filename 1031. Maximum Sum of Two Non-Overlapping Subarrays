class Solution {
public:
	int l;
	int m;
	int n;
	int ans;
	int dp[1005];
	int dpl[1005];
	int dpm[1005];
	int x;

	int get(int left, int right)
	{
		if (left < 0 || right >= n || left > right)
			return 0;
		if (left == 0)
			return dp[right];
		return dp[right] - dp[left - 1];
	}

	int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
		l = L;
		m = M;
		n = A.size();
		x = max(l, m);
		ans = 0;

		dp[0] = A[0];

		for (int i = 1; i < n; i++)
		{
			dp[i] = dp[i - 1] + A[i];
		}

		for (int i = n-1; i >= 0; i--)
		{
			if (i > n - l + 1)
				dpl[i] = 0;
			else 
				dpl[i] = max(dpl[i + 1], get(i, i + l - 1));
		}

		for (int i = n - 1; i >= 0; i--)
		{
			if (i > n - m + 1)
				dpm[i] = 0;
			else
				dpm[i] = max(dpm[i + 1], get(i, i + m - 1));
		}

		for (int i = 0; i < n; i++)
		{
			//try l
			int j = i + l - 1;
			if (j >= n)
				break;
			int temp = get(i, j);

			if (dpm[j + 1] > 0)
			{
				ans = max(ans, temp + dpm[j+1]);
			}
			

			//try m
			j = i + m - 1;
			if (j >= n)
				break;
			temp = get(i, j);

			if (dpl[j + 1] > 0)
			{
				ans = max(ans, temp + dpl[j + 1]);
			}
		}

		return ans;
	}
};
