class Solution {
public:
   
    
    queue<pair<int,pair<int,int>>>q;
    void paint(int i,int j,vector<vector<int>>&A)
    {
       
        if(i<0|| i>=A.size() || j<0 ||j>=A[0].size() || A[i][j]==0 || A[i][j]==2) return;
        // cout<<i<<"-"<<j<<endl;
        A[i][j]=2;
        q.push({0,{i,j}});
        paint(i+1,j,A);
        paint(i-1,j,A);
        paint(i,j+1,A);
        paint(i,j-1,A);
    }
    
    bool valid(int x,int y,int n,int m,vector<vector<int>>&A)
    {
        if(x<0||x>=n || y<0||y>=m||A[x][y]==2) return false;
        return true;
    }
    
    
   
    
    
    int shortestBridge(vector<vector<int>>& A) 
    {
        int xaxis[] = { 1, -1, 0, 0 } ;
        int yaxis[] = { 0, 0, 1, -1 } ;
        bool ok=false;
        for(int i=0;i<A.size();i++)
        {
            for(int j=0;j<A[0].size();j++)
            {
                if(A[i][j]==1)
                {
                    paint(i,j,A);
                    ok=true;
                    break;
                }
            }
            if(ok) break;
        }
            
        while(!q.empty())
        {
            auto temp=q.front();q.pop();
            int x=temp.second.first;
            int y=temp.second.second;
            int dis=temp.first;
            if(A[x][y]==1)
            {
                return temp.first-1;
            }
            for(int k=0;k<4;k++)
            {
                int newx=xaxis[k]+x;
                int newy=yaxis[k]+y;
                
                if(valid(newx,newy,A.size(),A[0].size(),A))
                {
                   if(A[newx][newy]==0) A[newx][newy]=2;
                    q.push({dis+1,{newx,newy}});
                }
            }
        }
        return  0;
        
    }
};
