class SnakeGame {
public:
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    deque<pair<int, int>> body;
    int wid, hei;
    vector<vector<int>> fo;
    int score;
    SnakeGame(int width, int height, vector<vector<int>>& food) {
        wid = width;
        hei = height;
        fo = food;
        body.push_back({0, 0});
        score = 0;
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    int move(string direction) {
        pair<int, int> head = body.front();
        switch (direction[0])
        {
            case 'U':
                if (--head.second < 0)
                {
                    return -1;
                }
                break;
            case 'L':
                if (--head.first < 0)
                {
                    return - 1;
                }
                break;
            case 'R':
                if (++head.first >= wid)
                {
                    return -1;
                }
                break;
            case 'D':
                if (++head.second >= hei)
                {
                    return -1;
                }
                break;
        }
        auto it = find(body.begin(), body.end(), head);
        if (it != body.end() && *it != body.back())
        {
            return -1;
        }
        body.push_front(head);
        if (fo.size() > score && head.second == fo[score][0] && head.first == fo[score][1])
        {
            ++score;
        }
        else
        {
            body.pop_back();
        }
        return score;
    }
};
