/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        mergeSort(&head);
        return head;
    }
    
    void mergeSort(ListNode** head)
    {
        ListNode* ptr = *head;
        ListNode* a;
        ListNode* b;
        
        if(ptr == nullptr || ptr->next == nullptr)
            return;
        frontBackSplit(ptr, &a, &b);
        mergeSort(&a);
        mergeSort(&b);
        *head = sortedMerge(a, b);
    }
    
    void frontBackSplit(ListNode* head, ListNode** a, ListNode** b)
    {
        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        *a = head;
        *b = slow->next;
        slow->next = nullptr;
        return;
    }
    
    ListNode* sortedMerge(ListNode* a, ListNode* b)
    {
        ListNode* res = nullptr;
        if(a == nullptr)
            return b;
        if(b == nullptr)
            return a;
        
        if(a->val <= b->val)
        {
            res = a;
            res->next = sortedMerge(a->next, b);
        }
        else
        {
            res = b;
            res->next = sortedMerge(a, b->next);
        }
        return res;
    }
};
