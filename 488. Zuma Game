 int findMinStep(string board, string hand) {
        if(board.size() == 0) return 0;
        int res = hand.size()+1;
        for(int i = 0; i < board.size(); ) {
            int cur_steps = 0, cnt = 0;
            char ball = board[i];
            // try eliminate current ball
            while(i < board.size() && board[i] == ball) {
                i++;
                cnt++;
            }
            // insert 3-cnt balls, remove it from hand
            if(count(hand.begin(), hand.end(), ball) >= 3-cnt){
                cur_steps += 3-cnt;
                string newhand = hand;
                string left = board.substr(0, i-cnt);
                string right = board.substr(i);
                string newboard = generate(left, right);
                // remove used balls
                for(int k = 0; k < 3-cnt; k++) {
                    newhand.erase(newhand.find(ball), 1);
                }
                int furtherSteps = findMinStep(newboard, newhand);
                if(furtherSteps != -1) {        
                    res = min(res, cur_steps+furtherSteps);
                }                
            }
        }
        return res == hand.size()+1 ? -1 : res;
    }
    // generate new board from left and right
    string generate(string left, string right) {
        int j = left.size()-1, k = 0, dup = 0;
        while(j >= 0 && left[j] == right.front()) { j--; dup++; }
        while(k < right.size() && right[k] == left.back()) { k++;dup++; }
        if(dup >= 3) return generate(left.substr(0, j+1), right.substr(k));
        else return left+right;
    }
