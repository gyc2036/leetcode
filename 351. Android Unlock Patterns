class Solution {
private:
    vector<vector<vector<int>>> dp;
public:
    int ways(vector<vector<int>> &kp, int m, int start, int state) {
        if(m == 0) {
            return 1;
        }

        if(dp[m][start][state] != -1) {
            return dp[m][start][state];
        }

        int len = 0, kpState;
        for(int i=1; i<=9; i++) {
            kpState = state | (1<<i);
            if(state != kpState) {
                if(kp[i][start]==0 || (state & (1<<kp[i][start]))) {
                    len += ways(kp, m-1, i, kpState);
                }
            }
        }
        dp[m][start][state] = len;
        return len;
    }

    int numberOfPatterns(int m, int n) {
        vector<vector<int>> kp(10, vector<int>(10, 0));
        vector<bool> visited(10, false);
        int count = 0;

        // init keypad
        // kp[i][j] = kp[j][i] = "number" between "i" and "j" on keypad
        // if this "number" has been visited we can cross this "number" else we cannot cross
        kp[1][3] = kp[3][1] = 2;
        kp[1][7] = kp[7][1] = 4;
        kp[3][9] = kp[9][3] = 6;
        kp[9][7] = kp[7][9] = 8;
        kp[2][8] = kp[8][2] = 5;
        kp[4][6] = kp[6][4] = 5;
        kp[1][9] = kp[9][1] = 5;
        kp[3][7] = kp[7][3] = 5;

        if(m>n) {
            swap(m, n);
        }

        // dp[length][keyNum][state]
        dp.resize(n+1);
        for (int i=0; i<=n; i++) {
            dp[i].resize(10);
            for (int j=0; j<10; j++) {
                dp[i][j].resize((1<<10), -1);
            }
        }

        while(m<=n) {
            count += ways(kp, m, 0, 0);
            m++;
        }

        return count;
    }
};
