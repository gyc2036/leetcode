class Solution {
public:
    int checkRecord(int n) {
      typedef long long int64;
      const int M = (int)1e9 + 7;
      const int maxn = 100000 + 5;
      auto add = [M](int64 x, int64 y) { return (x + y) % M; };
      auto subtract = [M](int64 x, int64 y) { return (M + x - y) % M; };
      
      function<int64(int)> f = [&, memo = std::array<optional<int64>, maxn>{}](int n) mutable -> int64 {
        if (n == 0)
          return 1;
        else if (n == 1)
          return 2;
        else if (n == 2)
          return 4;
        else if (n == 3)
          return 7;
        else if (n == 4)
          return 13;
        return memo[n] ? *memo[n] : *(memo[n] = subtract(2 * f(n - 1), f(n - 4)));
      };
      
      auto solve = [&]() {
        int result = f(n); {
          for (int i = 1; i <= n; ++i) {
            result = add(result, f(i - 1) * f(n - i));
          }
        }
        return result; 
      };
      
      return solve();
    }
};
