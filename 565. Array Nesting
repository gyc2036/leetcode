int findParent(vector<int> &p, int i) {
	if(p[i]==-1) return i;
	int pi = findParent(p,p[i]);
	p[i] = pi;
	return pi;
}
void Union(vector<int> &p, int i, int j) {
	int pi = findParent(p,i);
	int pj = findParent(p,j);
	if(pi<pj)      p[pj] = pi;
	else if(pj<pi) p[pi] = pj;
}
int arrayNesting(vector<int>& nums) {
	int n = nums.size();   
	vector<int> parent(n,-1);
	for(int i=0;i<n;i++) Union(parent, i, nums[i]);
	vector<int> count(n,0);
	int res = 0;
	for(int i=0;i<n;i++) {
		int pi = findParent(parent, i);
		count[pi]++;
		res = max(res, count[pi]);
	}
	return res;
}
