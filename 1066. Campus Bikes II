class Solution {
public:
    int assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {
        unordered_map<int, int> m;
        bitset<10> used;
        return dfs(workers, bikes, m, used, 0);
    }
    static int dfs(const vector<vector<int>>& workers, const vector<vector<int>>& bikes, unordered_map<int ,int>& m, bitset<10>& used, int w) {
        const int key = getKey(used);
        if(m.count(key)) return m[key];
        int sizeW = workers.size(), sizeB = bikes.size();
        if(w == sizeW) return 0;
        int d = INT32_MAX;
        for(int i = 0;  i < sizeB; ++i) {
            if(!used[i]) {
                used[i] = true;
                d = min(d, dist(workers[w], bikes[i]) + dfs(workers, bikes, m, used, w+1));
                used[i] = false;
            }
        }
        return m[key] = d;
        
    }
    static inline int dist(const vector<int>& a, const vector<int>& b) {
        return abs(a[0] - b[0]) + abs(a[1] - b[1]);
    }
    static int getKey(const bitset<10>& v) {
        int val = 1 << 10;
        for(int i = 9; i >= 0; --i) val |= v[i] << i;
        return val;
    }
};

auto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();
