template <class F>
struct recursive {
  F f;
  template <class... Args>
  decltype(auto) operator()(Args&&... args)  const { return f(std::ref(*this), std::forward<Args>(args)...); }
  
  template <class... Args>
  decltype(auto) operator()(Args&&... args)  { return f(std::ref(*this), std::forward<Args>(args)...); }
};

template <class F> recursive(F) -> recursive<F>;
auto const rec = [](auto f){ return recursive{std::move(f)}; };

class Solution {
 public:
  vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
    const int n    = size(nums);
    const int maxn = 20000;

    auto prefix_sum = rec([&, memo = array<optional<int>, maxn> {}](auto && prefix_sum, int i) mutable -> int {
      if (memo[i]) return *memo[i];
      return *(memo[i] = i == 0 ? nums[i] : prefix_sum(i - 1) + nums[i]);
    });

    auto partial_sum = [&](int i, int j) {
      return i == 0 ? prefix_sum(j) : prefix_sum(j) - prefix_sum(i - 1);
    };

    auto f = rec([&, memo = array<array<optional<int>, 4>, maxn> {}](auto && f, int i, int j) mutable -> int {
      if (memo[i][j]) return *memo[i][j];
      return *(memo[i][j] = [&]{
        if (j == 0) return 0;
        else {
          int acc = INT_MIN;
          if (i - (k - 1) >= (j - 1) * k)
            acc = std::max(acc, partial_sum(i - (k - 1), i) +  (i - k >= 0 ? f(i - k, j - 1) : 0));
          if (i>= j * k)
            acc = std::max(acc, f(i - 1, j));
          return acc;
        }
      }());
    });

    auto findpath = [&](int i, int j) -> vector<int> {
      vector<int> trace {};
      auto dfs = rec([&](auto &&dfs, int i, int j) -> void {
        if (j == 0)
          return;
        if (i >= 1 and f(i - 1, j) == f(i, j)) 
          return dfs(i - 1, j);
        if (j == 1 and i - (k - 1) - 1 == -1 and partial_sum(i - (k - 1), i) == f(i, j)) 
          return trace.push_back(0);
        for (int l = 0; l < i - (k - 1); ++l) 
          if (f(l, j - 1) + partial_sum(i - (k - 1), i) == f(i, j)) 
            return trace.push_back(i - (k - 1)), dfs(l, j - 1);
        return;
      });

      return (dfs(n - 1, 3),
              std::reverse(begin(trace), end(trace)),
              trace);
      };

    return findpath(n - 1, 3);
  }
};
