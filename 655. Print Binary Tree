class Solution {
private:
    struct TreeNodeWithId {
        TreeNode *n;
        int id;
        TreeNodeWithId(TreeNode *node, int idx) :
            n(node), id(idx)
        {}
    };
    
    int max(int a, int b) {
        return (a > b) ? a : b;
    }
    
public:
    //! Find maximum depth of tree
    int maxDepth(TreeNode *root) {
        if (!root) return 0;
        return 1 + max(maxDepth(root->left), maxDepth(root->right));
    }
    
    //! Pre-size vec of vec of string using depth info
    void initTreeVec(int depth, vector<vector<string>> &treeVec, int &numStrs) {
        treeVec.resize(depth);
        numStrs = (1 << depth) - 1;
        for (int i = 0; i < depth; ++i) {
            treeVec[i].resize(numStrs);
        }
    }
    
    //! Print all nodes breadth-first. Store and use node indices in special struct.
    void bfPrint(TreeNode *root, int start, int stepSize, vector<vector<string>> &res) {
        if (!root) return;
        
        queue<TreeNodeWithId*> q;
        
        q.push(new TreeNodeWithId(root, 0));
        
        int currDepth = 0;
        
        while (!q.empty()) {
            int qSize = q.size();
            
            for (int i = 0; i < qSize; ++i) {
                // dequeue
                TreeNodeWithId *nWithId = q.front();
                q.pop();
                
                // the pos of this node is easily calculated from nWithId->id
                int id = nWithId->id;
                res[currDepth][start + stepSize*id] = to_string(nWithId->n->val);
                
                // We have to make sure to store the proper id for children 
                TreeNode *left = nWithId->n->left;
                TreeNode *right = nWithId->n->right;
                
                int twiceId = id*2;
                // For left child the id is (parent's id) * 2.
                if (left) {
                    q.push(new TreeNodeWithId(left, twiceId));
                }
                // For right child the id is (parent's id * 2) + 1
                if (right) {
                    q.push(new TreeNodeWithId(right, twiceId + 1));
                }
            }
            
            // Halve start, stepSize
            start >>= 1;
            stepSize >>= 1;
            // Incr currDepth
            ++currDepth;
        }
    }
    
    vector<vector<string>> printTree(TreeNode* root) {
        vector<vector<string>> res;
        // Get the max depth of tree
        int depth = maxDepth(root);
        // Create vec of vec of string with the correct "row"/"column" sizes
        int numStrs;
        initTreeVec(depth, res, numStrs);
        // Init vars to store node indexing info
        int start = numStrs >> 1;
        int stepSize = numStrs + 1;
        // Do breadth-first print
        bfPrint(root, start, stepSize, res);
        return res;
    }
};
