class Solution {
public:

void func(TreeNode* root, TreeNode* par, vector<int>& to_delete, vector<TreeNode*>& v,int flag) {
    if(!root)return;
    
    auto it = find(to_delete.begin(), to_delete.end(), root->val);
    if(it==to_delete.end()) {
        if(flag==0) {
            v.push_back(root);
        }
        if(root->left)func(root->left,root,to_delete,v,1);
        if(root->right)func(root->right,root,to_delete,v,1);
    }
    else {
        if(par!=NULL && par->right==root) {
            par->right=NULL;
            if(root->left)func(root->left,NULL,to_delete,v,0);
            if(root->right)func(root->right,NULL,to_delete,v,0);
        }
        if(par!=NULL && par->left==root) {
            par->left=NULL;
            if(root->left)func(root->left,NULL,to_delete,v,0);
            if(root->right)func(root->right,NULL,to_delete,v,0);
        }
        if(par==NULL) {
            if(root->left)func(root->left,NULL,to_delete,v,0);
            if(root->right)func(root->right,NULL,to_delete,v,0);
        }
    }
}

vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
    vector<TreeNode*> v;
    func(root,NULL, to_delete, v,0);
    return v;
}
};
