class Solution {
public:
int longestPalindromeSubseq(string s) {
int n = s.length();
int mem[n][n];
memset(mem, 0, sizeof(mem));
return lps(s,0,n-1,&mem[0][0], n);

}
                
int lps(string& s, int i, int j, int* mem, int n)
{
    
    if(i>j || s.empty())
        return 0;
    
    if(i - j == 0)
        return 1;
    
    if(i - j == 1 && s[i] == s[j])
        return 2;
		
    if(*(mem+ i*n + j) ==0)
    {
        if(s[i] == s[j])
        {
            *(mem+ i*n + j) =  2 + lps(s,i+1,j-1,mem, n);
        }
        else
        {
            *(mem+ i*n + j) = std::max(lps(s,i,j-1,mem, n), lps(s,i+1,j,mem, n));
        }
    }
     return *(mem+ i*n + j);          
}
};
