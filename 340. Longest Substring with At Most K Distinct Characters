class Solution {
public:
    int lengthOfLongestSubstringKDistinct(string s, int k) {
        if (s.empty()) {
            return 0;
        }    
    
        std::unordered_map<char, int> table;
        
        int uCount = 0;
        int maxLen = 0;
        int i = 0; int j = 0;
        int len = 0;
        while (j < s.size()) {
            ++table[s[j]];
            ++len;
            if (table[s[j]] == 1) {
                // This is a unique character, increment uCount
                ++uCount;
            } 
            
            if (uCount <= k) {
                maxLen = max(maxLen, len); 
            } else if (uCount > k) {
                --table[s[i]];
                --len;
                ++i;
                if (table[s[i-1]] == 0) {
                    --uCount;
                    ++j;
                    continue;
                }
            } 
            ++j;   
        }
		
        return maxLen;
    }
};
