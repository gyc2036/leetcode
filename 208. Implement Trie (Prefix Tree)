struct Node {   // Node to implement trie.
    string prefix;  // Current prefix.
    unordered_map<char, Node*> children;
    bool isWord;    // boolean if path to this node is a word.
    Node(string s) : prefix(s), children(NULL), isWord(false) {}
};

class Trie {
private:
        Node* root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new Node("");
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* curr = root;
        for (int i = 0; i < word.size(); i++) {
            if (curr->children[word[i]] == 0) { // not in trie.
                curr->children[word[i]] = new Node(word.substr(0, i + 1));
            }
            curr = curr->children[word[i]]; // if already there, or just added, then move to child.
            if (i == word.size() - 1) curr->isWord = true;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* curr = root;
        for (auto ch : word) {
            if (curr->children.count(ch) > 0) curr = curr->children[ch];
            else return false;
        }
        return curr->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* curr = root;
        for (auto ch : prefix) {
            if (curr->children.count(ch) > 0) curr = curr->children[ch];
            else return false;
        }
        return true;
    }
};
