class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& grid) 
    {
        vector<int> count(10, 0);

        for(int row = 0; row < grid.size(); row++) //checks for valid rows first
        {
            for(int col = 0; col < grid[row].size(); col++)
            {
                if(grid[row][col] != '.')
                {
                    count[grid[row][col] - '0']++;

                   if(count[grid[row][col] - '0'] > 1)
                   {
                       return false;
                   }      
                }
            }

            fill(count.begin(), count.end(), 0);
        }


        fill(count.begin(), count.end(), 0);

        for(int col = 0; col < grid.size(); col++) //now checks for valid columns
        {
            for(int row = 0; row < grid[col].size(); row++)
            {
                if(grid[row][col] != '.')
                {
                    count[grid[row][col] - '0']++;

                    if(count[grid[row][col] - '0'] > 1)
                        return false;
                }
            }

            fill(count.begin(), count.end(), 0);
        }

        fill(count.begin(), count.end(), 0);

        for(int row = 0; row < grid.size(); row += 3) //now checks for all valid squares
        {
            for(int col = 0; col < grid.size(); col += 3)
            {
                for(int x = row; x < row + 3; x++)
                {
                    for(int y = col; y < col + 3; y++)
                    {
                        if(grid[x][y] != '.')
                        {
                            count[grid[x][y] - '0']++;

                        if(count[grid[x][y] - '0'] > 1)
                            return false;
                        }
                    }
                }

                fill(count.begin(), count.end(), 0);
            }
        }

        return true;
    }
};
