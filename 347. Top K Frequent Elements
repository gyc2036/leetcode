class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> freq;
        auto cmp = [](const pair<int,int>& a, const pair<int,int> &b) { return a.first > b.first; };
        priority_queue<pair<int,int>, vector<pair<int,int>>, decltype(cmp)> pq(cmp);
        vector<int> res(k);
        for(auto num: nums) {
            freq[num]++;
        }
        unordered_map<int,int>::const_iterator cit;
        for(cit = freq.begin(); cit != freq.end(); ++cit) {
            pq.push(make_pair(cit->second, cit->first));
            if(pq.size() > k)
                pq.pop();
        }
        int idx = k - 1;
        while(!pq.empty()) {
            res[idx--] = pq.top().second;
            pq.pop();
        }
        return res;
    }
};
