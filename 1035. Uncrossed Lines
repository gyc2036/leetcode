class Solution {
public:
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
        int n = A.size() ; 
        int m = B.size() ;
        int dp[n][m] ; 
        memset(dp , 0 , sizeof dp) ; 
        for(int i = 0 ; i < n ; ++i){
            for(int j = 0 ; j < m ; ++j){
                if(i == 0 and j == 0 ){
                    if(A[0] == B[0]){
                        dp[i][j] = 1; 
                    }
                    else dp[i][j] = 0 ; 
                }
                else if(i == 0 and j ){
                    if(A[i] == B[j]){
                        dp[i][j] = 1; 
                    }
                    else{
                        dp[i][j] = dp[i][j-1] ; 
                    }
                }
                else if(i and j == 0 ) {
                    if(A[i] == B[j]){
                        dp[i][j] = 1 ; 
                    }
                    else {
                        dp[i][j] = dp[i-1][j] ; 
                    }
                }
                else if(i and j ){
                    if(A[i] == B[j]){
                        dp[i][j] = max(dp[i][j] , 1 + dp[i-1][j-1]) ; 
                    }
                    else {
                        dp[i][j]=  max({dp[i][j] , dp[i-1][j] , dp[i][j-1]}) ; 
                    }
                }
            }
        }
        int foo =  dp[n-1][m-1] ; 
        return foo ; 
    }
};
