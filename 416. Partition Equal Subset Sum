class Solution {
private:
    bool helper(vector<vector<int>>& dp, vector<int>& nums, int curr, int sum, int pos) {
        if (pos > 0 && curr == sum / 2) return 1;
        if (pos == nums.size()) return 0;
        if (dp[pos][curr] != -1) return dp[pos][curr]; 
        int possible = helper(dp, nums, curr + nums[pos], sum, pos + 1) || helper(dp, nums, curr, sum, pos + 1);
        dp[pos][curr] = possible;
        return possible;
    }
public:
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum % 2 == 1) return false;
        vector<vector<int>> dp(nums.size(), vector<int>(sum + 1, -1));
        return helper(dp, nums, 0, sum, 0);
    }
};
