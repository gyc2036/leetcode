/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
    Point p0;

    Point nextToTop(stack<Point>& s) {
        Point p = s.top();
        s.pop();
        Point res = s.top();
        s.push(p);
        return res;
    }

    void swap(Point& p1, Point& p2) {
        Point tmp = p1;
        p1 = p2;
        p2 = tmp;
    }

    int dist(Point p1, Point p2) {
        return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2. y);
    }

    int orientation(Point p0, Point p1, Point p2) {
        int val = (p1.y - p0.y) * (p2.x - p1.x) - (p1.x - p0.x) * (p2.y - p1.y);
        if(val == 0) return 0;
        return val > 0 ? 1 : 2;
    }

    int compare(const void* vp1, const void* vp2) {
        Point* p1 = (Point*)vp1;
        Point* p2 = (Point*)vp2;

        int o = orientation(p0, *p1, *p2);
        if(o == 0) return (dist(p0, *p1) <= dist(p0, *p2) ? -1 : 1);
        return (o == 2) ? - 1 : 1; 
    }

class Solution {
public:
    vector<Point> outerTrees(vector<Point>& points) {
        vector<Point> res;
        if(points.size() == 0) return res; 
        int y_min = points[0].y;
        int min = 0;
        for(int i = 0; i < points.size(); ++i) {
            int y = points[i].y;
            if(y < y_min || (y == y_min && points[i].x < points[min].x)) {
                y_min = y;
                min = i;
            }
        }
        
        swap(points[0], points[min]);
        p0 = points[0];
        qsort(&points[1], points.size() - 1, sizeof(Point), compare);
        // for(auto &a : points) {
        //     cout << a.x << " " << a.y << endl;
        // }
        // int size = 1; 
        // for(int i = 1; i < points.size(); ++i) {
        //     while(i < points.size() - 1 && orientation(p0, points[i], points[i + 1]) == 0) ++i;
        //     points[size] = points[i];
        //     ++size;
        // }
        // if(size < 3) return res;
        
        stack<Point> s;
        s.push(points[0]);
        s.push(points[1]);
        s.push(points[2]);
        for(int i = 3; i < points.size(); ++i) {
            // cout << "in for" << endl;
            // cout << nextToTop(s).x << " " << nextToTop(s).y << endl;
            // cout << s.top().x << " " << s.top().y << endl;
            // cout << points[i].x << " " << points[i].y << endl;
            while(orientation(nextToTop(s), s.top(), points[i]) != 2 && orientation(nextToTop(s), s.top(), points[i]) != 0) {
                // cout << orientation(nextToTop(s), s.top(), points[i]) << endl;
                s.pop();
                // cout << "pop " << s.top().x << " " << s.top().y << endl;
            }
            s.push(points[i]);
        }
        while(!s.empty()) {
            res.push_back(s.top());
            s.pop();
        }
        return res;
    }
};
