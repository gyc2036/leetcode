class Solution {
public:
    
    int getMineCountAround(vector<vector<char>>& board, int x, int y, 
                           vector<pair<int, int>> &neighbors, 
                           vector<vector<bool>> &visited)
    {
        int res = 0;
        
        int startX = x > 0 ? x - 1 : 0;
        int endX = (x < board.size() - 1 ? x + 1 : x);
        
        int startY = y > 0 ? y - 1 : 0;
        int endY = (y < board[0].size() - 1 ? y + 1 : y);

        for(int i = startX ; i < endX + 1 ; i++)
        {
            for(int j = startY ; j < endY + 1 ; j++)
            {
                if(i == x && j == y)
                    continue;
                
                if(board[i][j] == 'M')
                    res += 1;
                else if(board[i][j] == 'E' && !visited[i][j])
                    neighbors.push_back({i, j});
            }
        }
        return res;
    }
    
    void pushStack(stack<pair<int,int>> &out_q, vector<pair<int,int>> &v, vector<vector<bool>> &visited)
    {
        for(auto xy : v)
        {
            out_q.push(xy);
            visited[xy.first][xy.second] = true;
        }
        v.clear();
    }
    
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        
        int x = click[0], y = click[1];
        
        if(board[x][y] == 'M')
        {
            board[x][y] = 'X';
            return board;
        }
        
        vector<vector<bool>> visited; visited.resize(board.size());
        for(int i = 0 ; i < visited.size() ; i++)
            visited[i].assign(board[0].size(), false);
        
        // check the clicked cell
        vector<pair<int, int>> neighbors; neighbors.reserve(8);
        int mineCnt = getMineCountAround(board, x, y, neighbors, visited);
        if(mineCnt > 0)
        {
            board[x][y] = '0' + mineCnt;
            return board;
        }
        
        // no mines around
        board[x][y] = 'B';
        
        // run DFS on all neighbors, with BFS was very slow
        stack<pair<int,int>> cells; 
        pushStack(cells, neighbors, visited);
        
        while(!cells.empty())
        {
            pair<int,int> n = cells.top();
            cells.pop();

            x = n.first; y = n.second;
            mineCnt = getMineCountAround(board, x, y, neighbors, visited);

            if(mineCnt > 0)
            {
                board[x][y] = '0' + mineCnt;
                neighbors.clear();
            }
            else
            {
                // no mines around
                board[x][y] = 'B';
                
                pushStack(cells, neighbors, visited);
            }
        }
        
        return board;
    }
};
