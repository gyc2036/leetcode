class Solution {
private:
    struct hash_pair { 
        size_t operator()(const pair<int, int>& p) const { 
            auto hash1 = hash<int>{}(p.first); 
            auto hash2 = hash<int>{}(p.second); 
            return hash1 ^ hash2; 
        }
    };
public:
    int minAreaRect(vector<vector<int>>& points) {
        unordered_map<int, vector<vector<int>>> h;
        unordered_map<int, vector<vector<int>>> v;
        unordered_set<pair<int, int>, hash_pair> pset;
        
        for(const auto& p:points) {
            v[p[0]].push_back(p);
            h[p[1]].push_back(p);
            pset.insert({p[0], p[1]});
        }
        
        int min = -1;
        for(const auto& p:points) {
            auto ver = &v[p[0]];
            auto hor = &h[p[1]];
            for(auto& vv:*ver) {
                for(auto& hh:*hor) {
                    if (vv != hh && vv != p && hh != p) {
                        if (pset.find({hh[0], vv[1]}) != pset.end()) {
                           int width = abs(hh[0] - p[0]);
                           int height = abs(vv[1] - p[1]);
                           if(min > width * height || min == -1) {
                               min = width * height;
                           }
                        }
                    } 
                }
            }
            
        }
        return min == -1 ? 0 : min;
    }
};
