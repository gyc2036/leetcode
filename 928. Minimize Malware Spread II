class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        unordered_map<int, vector<int> > m;
        const int n = graph.size();
        for(int i: initial){
            unordered_set<int> visited(initial.begin(), initial.end());
            queue<int> q; q.push(i);
            while(!q.empty()){
                int cur = q.front(); q.pop();
                for(int j = 0; j < n; j++){
                    if(graph[cur][j] == 1){
                        if(!visited.count(j)){
                            visited.insert(j);
                            q.push(j);
                            m[j].push_back(i);
                        }
                    }
                }
            }
        }
       
        vector<int> res(n);
        for(auto& e: m){
            if(e.second.size() == 1){
                int i = e.second[0];
                res[i]++;
            }
        }
        int max = INT_MIN;
        int removed = -1;
        for(int i = 0; i < res.size(); i++) {
            if(res[i] > max) {
                max = res[i];
                removed = i;
            }
        }
        sort(initial.begin(), initial.end());
        return removed == -1 ? initial[0] : removed;
    }
};
