class SummaryRanges {
public:
    unordered_map<int, int> numtoid;
    int nextId;
    vector<int> parent;
    vector<int> rank;
    vector<vector<int> > interval;
    
    /** Initialize your data structure here. */
    SummaryRanges() {
        nextId = 0;
    }
    static bool compare(const vector<int> &lhs, const vector<int>& rhs) {
        return lhs[0] < rhs[0];
    }
    int find(int val) {
        if(parent[val] == -1)   return val;
        int par = find(parent[val]);
        parent[val] = par;
        return par;
    }
    void merge(int head1, int head2) {
        if(rank[head2] < rank[head1])   swap(head1, head2);
        
        parent[head1] = head2;
        // modify interval
        interval[head2][0] = min(interval[head1][0], interval[head2][0]);
        interval[head2][1] = max(interval[head1][1], interval[head2][1]);
        
        if(rank[head1] == rank[head2])
            rank[head2]++;
    }
    
    void addNum(int val) {
        if(numtoid.count(val))  return;
        // assign a id to val
        numtoid[val] = nextId++;
        
        parent.push_back(-1);
        rank.push_back(1);
        vector<int> it(2);
        it[0] = val; it[1] = val;
        interval.push_back(it);
        
        // now check if disjoint trees can be merged?
        if(numtoid.count(val-1)) {
            // merge it with the current tree
            merge(find(numtoid[val-1]), find(numtoid[val]));
        }
        if(numtoid.count(val+1)) {
            merge(find(numtoid[val+1]), find(numtoid[val]));
        }
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int> > result;
        
        // traverse over parent array
        for(int i = 0; i < parent.size(); i++) {
            if(parent[i] == -1)
                result.push_back(interval[i]);
        }
        sort(result.begin(), result.end(), compare);
        return result;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */
